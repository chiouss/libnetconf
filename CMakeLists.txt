cmake_minimum_required(VERSION 3.1)

# Allow setting VISIBILITY_PRESET on static library targets without warning.
cmake_policy(SET CMP0063 NEW)

file(STRINGS VERSION VERSION_STRING)
project(libnetconf VERSION ${VERSION_STRING})

string(REGEX REPLACE "([0-9]+)\.([0-9]+)\.([0-9]+)" \\1 LT_CURRENT "${VERSION_STRING}")
string(REGEX REPLACE "([0-9]+)\.([0-9]+)\.([0-9]+)" \\2 LT_REVISION "${VERSION_STRING}")
string(REGEX REPLACE "([0-9]+)\.([0-9]+)\.([0-9]+)" \\3 LT_AGE "${VERSION_STRING}")
set(LT_VERSION "${VERSION_STRING}")
set(LT_SOVERSION "${LT_CURRENT}")

set(IDNOGIT "released as version ${VERSION_STRING}")
find_package(Git QUIET)
if(GIT_FOUND)
	execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse HEAD OUTPUT_VARIABLE COMMIT_ID OUTPUT_STRIP_TRAILING_WHITESPACE)
	string(SUBSTRING ${COMMIT_ID} 0 20 COMMIT_ID)
	set(IDGIT "built from git ${COMMIT_ID}")
	execute_process(COMMAND ${GIT_EXECUTABLE} show RESULT_VARIABLE RESULT OUTPUT_QUIET)
	if (${RESULT} EQUAL 0)
		add_definitions(-DRCSID="${IDGIT}")
	else()
		add_definitions(-DRCSID="${IDNOGIT}")
	endif()
else(GIT_FOUND)
	add_definitions(-DRCSID="${IDNOGIT}")
endif(GIT_FOUND)

find_package(CURL REQUIRED)
if(CURL_FOUND)
	include_directories(${CURL_INCLUDE_DIR})
endif()
find_package(LibXml2 REQUIRED)
if(LibXml2_FOUND)
	include_directories(${LIBXML2_INCLUDE_DIR})
endif()
find_package(LibXslt REQUIRED)
if(LIBXSLT_FOUND)
	include_directories(${LIBXSLT_EXSLT_INCLUDE_DIR})
endif()

find_program(PYANG pyang REQUIRED)
find_program(XSLTPROC xsltproc REQUIRED)
find_program(PYTHON python3 REQUIRED)
if (DISABLE_LIBSSH)
	if (NOT SSH_PROG)
		find_program(SSH_PROG ssh REQUIRED)
	endif()
	add_compile_definitions(DISABLE_LIBSSH)
	set(LIBSSH_DIRECTIVE "#define DISABLE_LIBSSH")
endif(DISABLE_LIBSSH)
if (ENABLE_TLS)
	find_package(OpenSSL REQUIRED)
	if (OPENSSL_FOUND)
		include_directories(${OPENSSL_INCLUDE_DIR})
		add_compile_definitions(ENABLE_TLS)
	endif()
endif()

# add_definitions(-D_GNU_SOURCE)
add_compile_definitions(POSIX_SHM)

include(CheckSymbolExists)
include(CheckIncludeFile)
include(CheckLibraryExists)
set(CMAKE_REQUIRED_DEFINITIONS "-D_GNU_SOURCE")
check_symbol_exists(eaccess "unistd.h" EACCESS_EXIST)
check_include_file("utmpx.h" UTMPX_EXIST)
CHECK_LIBRARY_EXISTS(xml2 xmlDOMWrapReconcileNamespaces ${LIBXML2_LIBRARIES} LIBXML2_RECONNS)
if(EACCESS_EXIST)
	set(HAVE_EACCESS "#define HAVE_EACCESS")
else()
	set(HAVE_EACCESS "#undef HAVE_EACCESS")
endif()
if(UTMPX_EXIST)
	set(HAVE_UTMPX "#define HAVE_UTMPX")
else()
	set(HAVE_UTMPX "#undef HAVE_UTMPX")
endif()
if(LIBXML2_RECONNS)
	set(HAVE_LIBXML2_RECONNS "#define HAVE_XMLDOMWRAPRECONCILENAMESPACE")
else()
	set(HAVE_LIBXML2_RECONNS "#undef HAVE_XMLDOMWRAPRECONCILENAMESPACE")
endif()
set(NC_WORKINGDIR_PATH "/var/lib/${CMAKE_PROJECT_NAME}/")
set(NC_SESSIONFILE_PATH "${NC_WORKINGDIR_PATH}")
set(NCNTF_STREAMS_MAX_SIZE_IN_MB "0")
set(NCNTF_STREAMS_PATH "${NC_WORKINGDIR_PATH}/streams/")
set(SETBIT "0")
set(READ_TIMEOUT "30")
set(MONITORING_LIST_SIZE "16")
set(NACM_RECOVERY_UID "0")
set(API "__attribute__((visibility(\"default\")))")
set(INCLUDE_NOTIFICATIONS "#include \"libnetconf/notifications.h\"")
set(INCLUDE_NOTIFICATIONS_XML "#include \"libnetconf/notifications_xml.h\"")
set(INCLUDE_URL "#include \"libnetconf/url.h\"")
# for libnetconf.pc
include(GNUInstallDirs)
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(exec_prefix "${CMAKE_INSTALL_PREFIX}")
set(includedir "${CMAKE_INSTALL_INCLUDEDIR}")
set(libdir "${CMAKE_INSTALL_LIBDIR}")
set(datarootdir "${CMAKE_INSTALL_DATAROOTDIR}")
set(datadir "${CMAKE_INSTALL_DATADIR}")
# for lnctool
set(LNCTOOLDESTDIR "")
set(RNGLIB "${LNCTOOLDESTDIR}${datadir}/${CMAKE_PROJECT_NAME}/rnglib/")
set(XSLTDIR "${LNCTOOLDESTDIR}${datadir}/${CMAKE_PROJECT_NAME}/xslt/")
set(TEMPLATEDIR "${LNCTOOLDESTDIR}${datadir}/${CMAKE_PROJECT_NAME}/templates/")

add_compile_definitions(NC_WORKINGDIR_PATH="${NC_WORKINGDIR_PATH}")
add_compile_definitions(NC_SESSIONFILE_PATH="${NC_SESSIONFILE_PATH}")
add_compile_definitions(NCNTF_STREAMS_PATH="${NCNTF_STREAMS_PATH}")
add_compile_definitions(NCNTF_STREAMS_MAX_SIZE_IN_MB=${NCNTF_STREAMS_MAX_SIZE_IN_MB})
add_compile_definitions(SETBIT=${SETBIT})

foreach(name
	libnetconf.pc
	src/config.h
	headers/libnetconf.h
	headers/libnetconf_xml.h
	headers/libnetconf_ssh.h
	dev-tools/lnctool/lnctool
)
	configure_file("${CMAKE_SOURCE_DIR}/${name}.in" "${CMAKE_SOURCE_DIR}/${name}" @ONLY)
endforeach()

add_subdirectory(src)

install(FILES "${CMAKE_SOURCE_DIR}/libnetconf.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
set(ROOT_HDRS
	headers/libnetconf.h
	headers/libnetconf_ssh.h
	headers/libnetconf_xml.h
)
if(ENABLE_TLS)
	list(APPEND ROOT_HDRS headers/libnetconf_tls.h)
endif()
install(FILES ${ROOT_HDRS} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
